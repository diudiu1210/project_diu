
readme文件
配置文件：
1、py文件，能继承非常灵活，缺点是只有Python代码能用
2、yaml 比较通用  Java也适用，读取解析简洁智能
3、ini 读取比较复杂，以前用得比较多

框架分层
1、run_test.py 作用是代码入口，收集测试用例，生成测试报告
2、测试逻辑test_cases包，各个模块的测试用例方法，测试用例都放这个包下面，是方便管理和维护，扩展性强
3、数据管理层，data  用Excel数据，列表也可以，或者用yaml管理我们的数据
4、业务逻辑层 （request_handler  excel_handler通用的，logger，访问数据库
5、配置文件：和项目是相关联的，项目地址，数据库，logger级别
6、测试报告、输出

梳理：先通过run_test去收集用例，用例就是test_cases里 比如register模块里，先初始化Excel然后去读取我们的Excel数据
然后通过request_handler，拿到的数据去访问实际接口和预期结果断言



充值接口：
前置条件，比如充值依赖登录接口，用例依赖，用例关联
前置条件登陆实现的两种方式
1、在setup里，通过self.rq.visit()访问登陆接口，然后通过res=["获取token"]，存到属性当中，下次充值的时候就直接调用
2、第二种是在Excel里把登陆成功的用例复制到充值Excel第一条用例，拿到token，然后进行拼接。实现的话需要在res发起请求的后面进行判断
判断：如果返回的数据中是一个登录成功的接口，就获取token，存储到属性中self.token=token.如果是不是一个登录成功的接口就说明是一个充值接口，需要把前面登录的token进行拼接

jsonpath 作用:
1、操作更简单
2、有通用的表达方式可以获取指定的值

投资的前置条件
1、登录
2、标的状态是竞标中，要从数据库中找出一个符合条件的标
投资验证：
1、接口返回是否正确
2、余额是否正确

